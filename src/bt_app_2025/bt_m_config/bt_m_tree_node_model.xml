<root BTCPP_format="4">
    <TreeNodesModel>
        <Action ID="BTStarter">
            <output_port name="result" type="int"/>
        </Action>
        <Action ID="BannerChecker">
            <output_port name="remap_banner_place" type="std::string"/>
            <input_port name="banner_place" type="int"/>
        </Action>
        <Action ID="CamReceiver"/>
        <Action ID="Docking">
            <output_port name="final_pose" type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;"/>
            <input_port name="isPureDocking" type="bool"/>
            <input_port name="dock_type" type="std::string"/>
            <input_port name="shift" type="double"/>
            <input_port name="offset" type="double"/>
            <input_port name="base" type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;"/>
        </Action>
        <Action ID="FirmwareMission">
            <output_port name="mission_status" type="int"/>
            <input_port name="mission_type" type="int"/>
        </Action>
        <Action ID="GetBlackboard">
            <input_port name="blackboard_type" type="std::string"/>
            <input_port name="blackboard_key" type="std::string"/>
        </Action>
        <Action ID="GetLocation">
            <output_port name="pose" type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;"/>
            <input_port name="locaization_target" type="std::string"/>
        </Action>
        <Action ID="IntegratedMissionNode">
            <output_port name="mission_progress" type="int"/>
            <output_port name="mission_status" type="int"/>
            <input_port name="base" type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;"/>
            <input_port name="mission_set_name" type="std::string"/>
        </Action>
        <Decorator ID="MaterialChecker">
            <output_port name="remap_offset" type="double"/>
            <output_port name="remap_shift" type="double"/>
            <output_port name="remap_dock_type" type="std::string"/>
            <output_port name="remap_index" type="int"/>
            <output_port name="remap_base" type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;"/>
            <input_port name="shift" type="double"/>
            <input_port name="offset" type="double"/>
            <input_port name="mission_type" type="std::string"/>
            <input_port name="dock_type" type="std::string"/>
            <input_port name="base_index" type="int"/>
        </Decorator>
        <Decorator ID="MissionChecker">
            <output_port name="level" type="std::string"/>
            <output_port name="remap_base" type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;"/>
            <input_port name="mission_type" type="std::string"/>
            <input_port name="base_index" type="int"/>
        </Decorator>
        <Action ID="MissionFailure">
            <output_port name="failed_levels" type="int"/>
            <input_port name="base_index" type="int"/>
            <output_port name="success_levels" type="int"/>
            <input_port name="robot_type" type="bool"/>
            <input_port name="step_results" type="std::deque&lt;int, std::allocator&lt;int&gt; &gt;"/>
        </Action>
        <Action ID="MissionStart">
            <output_port name="DOCK_DIR" type="std::string"/>
            <output_port name="SHIFT" type="double"/>
            <output_port name="FORWARD_S" type="double"/>
            <output_port name="BACK_S" type="double"/>
            <output_port name="BACK_M" type="double"/>
            <output_port name="FORWARD_M" type="double"/>
            <output_port name="FORWARD_L" type="double"/>
            <output_port name="BACK_L" type="double"/>
            <input_port name="INDEX_IN" type="int"/>
            <input_port name="SHIFT_IN" type="double"/>
            <input_port name="FORWARD_IN" type="std::deque&lt;double, std::allocator&lt;double&gt; &gt;"/>
            <input_port name="BACK_IN" type="std::deque&lt;double, std::allocator&lt;double&gt; &gt;"/>
        </Action>
        <Action ID="MissionSuccess">
            <input_port name="levels" type="int"/>
            <input_port name="base_index" type="int"/>
        </Action>
        <Action ID="MySetBlackboard">
            <output_port name="new_value" type="bool"/>
            <input_port name="blackboard_value" type="bool"/>
            <input_port name="blackboard_key" type="std::string"/>
        </Action>
        <Action ID="NavReceiver"/>
        <Action ID="Navigation">
            <output_port name="final_pose" type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;"/>
            <input_port name="dock_type" type="std::string"/>
            <input_port name="goal" type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;"/>
        </Action>
        <Action ID="Rotation">
            <output_port name="final_pose" type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;"/>
            <input_port name="degree" type="double"/>
            <input_port name="base" type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;"/>
        </Action>
        <Action ID="StopRobot"/>
        <Condition ID="TimerChecker">
            <input_port name="target_time_sec" type="double"/>
        </Condition>
        <Action ID="TopicSubTest">
            <output_port name="sum" type="int"/>
        </Action>
    </TreeNodesModel>
</root>
